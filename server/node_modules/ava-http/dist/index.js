'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assign = require('object-assign');
var request = require('request-promise');

var http = {};

/**
 * Request defaults
 */
var defaults = {
  method: 'get',
  json: true
};

/**
 * Base 'request-promise' wrapper
 * @param  {Object} options The request options
 * @return {Promise}
 */

var rp = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return request(assign({}, defaults, options));

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function rp(_x) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send GET Request.
 * Repond w/ Payload || ErrorResponse object.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */

http.get = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options.qs = options.qs || options.params || {};
            _context2.next = 3;
            return rp(assign({ uri: uri }, options));

          case 3:
            return _context2.abrupt('return', _context2.sent);

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return function (_x3, _x4) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send GET Request.
 * Repond w/ full Response object, always.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.getResponse = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options.resolveWithFullResponse = true;
            _context3.next = 3;
            return this.get(uri, options);

          case 3:
            return _context3.abrupt('return', _context3.sent);

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return function (_x6, _x7) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send POST Request.
 * Repond w/ Payload || ErrorResponse object.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.post = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return rp(assign(options, { uri: uri, method: 'post' }));

          case 2:
            return _context4.abrupt('return', _context4.sent);

          case 3:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return function (_x9, _x10) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send POST Request.
 * Repond w/ full Response object, always.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.postResponse = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            options.resolveWithFullResponse = true;
            _context5.next = 3;
            return this.post(uri, options);

          case 3:
            return _context5.abrupt('return', _context5.sent);

          case 4:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return function (_x12, _x13) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send PUT Request.
 * Repond w/ Payload || ErrorResponse object.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.put = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return rp(assign(options, { uri: uri, method: 'put' }));

          case 2:
            return _context6.abrupt('return', _context6.sent);

          case 3:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return function (_x15, _x16) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send PUT Request.
 * Repond w/ full Response object, always.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.putResponse = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            options.resolveWithFullResponse = true;
            _context7.next = 3;
            return this.put(uri, options);

          case 3:
            return _context7.abrupt('return', _context7.sent);

          case 4:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return function (_x18, _x19) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send DELETE Request.
 * Repond w/ Payload || ErrorResponse object.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.del = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return rp(assign(options, { uri: uri, method: 'delete' }));

          case 2:
            return _context8.abrupt('return', _context8.sent);

          case 3:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return function (_x21, _x22) {
    return ref.apply(this, arguments);
  };
}();

/**
 * Send DELETE Request.
 * Repond w/ full Response object, always.
 * @param  {String} uri     The URL to request
 * @param  {Object} options The Request Options
 * @return {Promise}
 */
http.delResponse = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(uri) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            options.resolveWithFullResponse = true;
            _context9.next = 3;
            return this.del(uri, options);

          case 3:
            return _context9.abrupt('return', _context9.sent);

          case 4:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return function (_x24, _x25) {
    return ref.apply(this, arguments);
  };
}();

module.exports = http;